var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/GameUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/GameUI":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        Laya.stage.alignV = GameConfig_1.default.alignV;
        Laya.stage.alignH = GameConfig_1.default.alignH;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = false;
        Laya.Stat.show();
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
        Laya.URL.basePath = "https://cdn.zzzgames.cn/batch/";
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var Queue_1 = require("./Queue");
var SubBox_1 = require("./SubBox");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        //添加3D场景
        var scene = Laya.stage.addChild(new Laya.Scene3D());
        //添加照相机
        var camera = (scene.addChild(new Laya.Camera(0, 0.1, 100)));
        camera.transform.translate(new Laya.Vector3(0, 7, 7));
        camera.transform.rotate(new Laya.Vector3(-30, 0, 0), true, false);
        //添加方向光
        var directionLight = scene.addChild(new Laya.DirectionLight());
        directionLight.color = new Laya.Vector3(0.6, 0.6, 0.6);
        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        var material = new Laya.BlinnPhongMaterial();
        Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function (tex) {
            material.albedoTexture = tex;
        }));
        //------------------未合批------------------------
        // for ( let i: number = 0; i < 5500; i++ )
        // {
        //     // //添加自定义模型
        //     let box: Box = new Box();
        //     box.meshRenderer.material = material;
        //     scene.addChild( box );
        // }
        // return;
        //------------------合批------------------------
        var queue = new Queue_1.Queue();
        var list = new Array();
        var mesh = Laya.PrimitiveMesh.createBox(0.15, 0.15, 0.15);
        for (var i = 0; i < 5500; i++) {
            // //添加自定义模型
            var sub = new SubBox_1.SubBox();
            sub.mesh = mesh;
            list.push(sub);
        }
        queue.queue = list;
        queue.init();
        var mode = new Laya.MeshSprite3D(queue.mesh);
        mode.meshRenderer.material = material;
        scene.addChild(mode);
        Laya.timer.frameLoop(1, _this, function () {
            queue.updateVBuff();
        });
        return _this;
    }
    return GameUI;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = GameUI;
},{"./../ui/layaMaxUI":7,"./Queue":4,"./SubBox":5}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 自定义序列
 * @author zhouyulong
 * 2019年3月8日 18:20:12
 */
var Queue = /** @class */ (function () {
    function Queue() {
        this.isUpdate = false;
    }
    Object.defineProperty(Queue.prototype, "mesh", {
        get: function () {
            return this._mesh;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Queue.prototype, "queue", {
        get: function () {
            return this._queue;
        },
        set: function (value) {
            this._queue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Queue.prototype, "meshCnt", {
        get: function () {
            return this._meshCnt;
        },
        set: function (value) {
            this._meshCnt = value;
            if (this._queue == null) {
                this._queue = new Array(value);
                for (var i = 0; i < value; i++) {
                    var struct = new this.registerCla();
                    this._queue[i] = struct;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Queue.prototype.init = function (mesh, meshCnt) {
        if (this._queue == null) {
            this._queue = new Array(meshCnt);
        }
        this.createSubQueue(mesh);
    };
    Queue.prototype.createSubQueue = function (mesh) {
        var i;
        var j;
        var vData;
        var totalIndLen = 0;
        var totalVerLen = 0;
        this._offset = 0;
        if (mesh) {
            this._vertexDecl = mesh._vertexBuffers[0].vertexDeclaration;
            for (i = 0; i < this._queue.length; i++) {
                if (this._queue[i] == null) {
                    var subMesh = new this.registerCla();
                    subMesh.mesh = mesh;
                    this._queue[i] = subMesh;
                }
                totalIndLen += mesh._indexBuffer.getData().length;
                totalVerLen += mesh._vertexBuffers[0].getData().length;
            }
        }
        else {
            for (i = 0; i < this._queue.length; i++) {
                totalIndLen += this._queue[i].indexs.length;
                totalVerLen += this._queue[i].vertex.length;
            }
            this._vertexDecl = this._queue[0].mesh._vertexBuffers[0].vertexDeclaration;
        }
        this._newIndexBuffer = new Uint16Array(totalIndLen);
        this._newVertexBuffer = new Float32Array(totalVerLen);
        this.declaration();
        this._mesh = Laya.PrimitiveMesh._createMesh(this._vertexDecl, this._newVertexBuffer, this._newIndexBuffer);
        this.update();
    };
    Queue.prototype.declaration = function () {
        var length;
        var j;
        this._offset = 0;
        length = this._vertexDecl.vertexElements.length;
        for (j = 0; j < length; j++) {
            switch (this._vertexDecl.vertexElements[j].elementFormat) {
                case "vector3":
                    this._offset += 3;
                    break;
                case "vector2":
                    this._offset += 2;
                    break;
            }
        }
    };
    /**
     * 重构mesh(非特殊情况慎用)
     */
    Queue.prototype.resetMesh = function () {
        var totalIndLen = 0;
        var totalVerLen = 0;
        var vertexDeclaration;
        this._newIndexBuffer = null;
        this._newVertexBuffer = null;
        for (var i = 0; i < this._queue.length; i++) {
            if (this._queue[i]) {
                vertexDeclaration = this._queue[i].mesh._vertexBuffers[0].vertexDeclaration;
                totalIndLen += this._queue[i].indexs.length;
                totalVerLen += this._queue[i].vertex.length;
            }
        }
        this._newIndexBuffer = new Uint16Array(totalIndLen);
        this._newVertexBuffer = new Float32Array(totalVerLen);
        this._mesh.destroy();
        this._mesh = Laya.PrimitiveMesh._createMesh(vertexDeclaration, this._newVertexBuffer, this._newIndexBuffer);
        this.update();
    };
    Queue.prototype.update = function () {
        this.updateIBuff();
        this.updateVBuff();
    };
    Queue.prototype.updateIBuff = function () {
        var i;
        var j;
        var vLast = 0;
        var iLast = 0;
        var iData;
        for (i = 0; i < this._queue.length; i++) {
            if (this._queue[i]) {
                iData = this._queue[i].indexs;
                for (j = 0; j < iData.length; j++) {
                    this._newIndexBuffer[j + iLast] = iData[j] + vLast;
                }
                vLast += this._queue[i].vertexCount;
                iLast += this._queue[i].indexCount;
            }
        }
        this.mesh._indexBuffer.setData(this._newIndexBuffer);
    };
    Queue.prototype.updateVBuff = function () {
        this._index = 0;
        for (this._i = 0; this._i < this._queue.length; this._i++) {
            this._tmp = this._queue[this._i];
            if (!this._tmp || !this._tmp.vertex || !this._tmp.isUpdate) {
                this._index += this._tmp.vertex.length;
                continue;
            }
            for (this._j = 0; this._j < this._tmp.vertex.length; this._j += this._offset) {
                if (!this._tmp.visible) {
                    this._newVertexBuffer[this._index] = NaN;
                    this._newVertexBuffer[this._index + 1] = NaN;
                    this._newVertexBuffer[this._index + 2] = NaN;
                }
                else {
                    this._newVertexBuffer[this._index] = this._tmp.vertex[this._j] + this._tmp.position.x;
                    this._newVertexBuffer[this._index + 1] = this._tmp.vertex[this._j + 1] + this._tmp.position.y;
                    this._newVertexBuffer[this._index + 2] = this._tmp.vertex[this._j + 2] + this._tmp.position.z;
                }
                this._newVertexBuffer[this._index + 3] = this._tmp.vertex[this._j + 3];
                this._newVertexBuffer[this._index + 4] = this._tmp.vertex[this._j + 4];
                this._newVertexBuffer[this._index + 5] = this._tmp.vertex[this._j + 5];
                this._newVertexBuffer[this._index + 6] = this._tmp.vertex[this._j + 6];
                this._newVertexBuffer[this._index + 7] = this._tmp.vertex[this._j + 7];
                this._newVertexBuffer[this._index + 8] = this._tmp.vertex[this._j + 8];
                this._newVertexBuffer[this._index + 9] = this._tmp.vertex[this._j + 9];
                this._index += this._offset;
            }
        }
        this.mesh._vertexBuffers[0].setData(this._newVertexBuffer);
    };
    return Queue;
}());
exports.Queue = Queue;
var eQueueType;
(function (eQueueType) {
    eQueueType[eQueueType["STATIC"] = 0] = "STATIC";
    eQueueType[eQueueType["DYNAMIC"] = 1] = "DYNAMIC";
})(eQueueType = exports.eQueueType || (exports.eQueueType = {}));
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SubQueue_1 = require("./SubQueue");
var SubBox = /** @class */ (function (_super) {
    __extends(SubBox, _super);
    function SubBox() {
        var _this = _super.call(this) || this;
        _this._t = 0;
        _this.position = new Laya.Vector3(-1.7 + Math.random() * 3.5, Math.random() * 6, 2 + -Math.random() * 8);
        _this._r = Math.random();
        Laya.timer.once(Math.random() * 500, _this, function () {
            Laya.timer.frameLoop(1, _this, _this.update);
        });
        return _this;
    }
    SubBox.prototype.update = function () {
        this._t += 0.01;
        if (this._r > 0.1 && this._r < 0.3) {
            this.z = Math.sin(this._t);
        }
        else if (this._r >= 0.3 && this._r < 0.5) {
            this.z = Math.cos(this._t);
        }
        else if (this._r >= 0.5 && this._r < 0.7) {
            this.y = Math.sin(this._t);
        }
        else if (this._r >= 0.7 && this._r < 0.9) {
            this.y = Math.sin(this._t);
        }
        else if (this._r >= 0.9) {
            this.x = Math.cos(this._t);
        }
    };
    return SubBox;
}(SubQueue_1.SubQueue));
exports.SubBox = SubBox;
},{"./SubQueue":6}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 自定义游戏场景物件基类
 * @author zhouyulong
 * 2018年8月21日 11:26:01
 */
var SubQueue = /** @class */ (function () {
    function SubQueue() {
        this.visible = true;
        this.isUpdate = true;
        this._isTrastrom = false;
        this.position = new Laya.Vector3();
        this.matrix = new Laya.Matrix4x4();
        this._rotaMat = new Laya.Matrix4x4();
        this._scaMat = new Laya.Matrix4x4();
    }
    Object.defineProperty(SubQueue.prototype, "indexCount", {
        get: function () {
            return this._indexCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "vertexCount", {
        get: function () {
            return this._vertexCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "indexs", {
        get: function () {
            return this._indexs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "vertex", {
        get: function () {
            return this._vertex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "mesh", {
        get: function () {
            return this._mesh;
        },
        set: function (value) {
            if (value == null) {
                this._vertex = null;
                this._indexs = null;
                return;
            }
            this._mesh = value;
            this._vertex = value._vertexBuffers[0].getData();
            this._indexs = value._indexBuffer.getData();
            this._indexCount = value._indexBuffer.indexCount;
            this._vertexCount = value.vertexCount;
        },
        enumerable: true,
        configurable: true
    });
    SubQueue.prototype.reset = function () {
        this.position.setValue(0, 0, 0);
        this.matrix.identity();
        this._rotaMat.identity();
        this._scaMat.identity();
    };
    Object.defineProperty(SubQueue.prototype, "isTrastrom", {
        get: function () {
            return this._isTrastrom;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "x", {
        get: function () {
            return this.position.x;
        },
        set: function (value) {
            this.position.x = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "y", {
        get: function () {
            return this.position.y;
        },
        set: function (value) {
            this.position.y = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "z", {
        get: function () {
            return this.position.z;
        },
        set: function (value) {
            this.position.z = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "rx", {
        /**
         * x旋转坐标
         */
        get: function () {
            return this._rx;
        },
        /**
         * x旋转坐标
         */
        set: function (value) {
            if (value == this._rx || value == null)
                return;
            this._rx = value;
            // GameMathUtils.rotationX( value, this.matrix );
            this._isTrastrom = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "ry", {
        /**y旋转坐标 */
        get: function () {
            return this._ry;
        },
        /**y旋转坐标 */
        set: function (value) {
            if (value == this._ry || value == null)
                return;
            this._ry = value;
            // GameMathUtils.rotationY( value, this.matrix );
            this._isTrastrom = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "rz", {
        /**z旋转坐标 */
        get: function () {
            return this._rz;
        },
        /**z旋转坐标 */
        set: function (value) {
            if (value == this._ry || value == null)
                return;
            this._rz = value;
            // GameMathUtils.rotationZ( value, this.matrix );
            this._isTrastrom = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "sx", {
        get: function () {
            return this._sx;
        },
        set: function (value) {
            this._sx = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "sy", {
        get: function () {
            return this._sy;
        },
        set: function (value) {
            this._sy = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubQueue.prototype, "sz", {
        get: function () {
            return this._sz;
        },
        set: function (value) {
            this._sz = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 更新位置
     * @param x     x坐标
     * @param y     y坐标
     * @param z     z坐标
     */
    SubQueue.prototype.updatePostion = function (x, y, z) {
        this.position.setValue(x, y, z);
    };
    /**
     * 更新旋转信息
     * @param rx    rx
     * @param ry    ry
     * @param rz    rz
     */
    SubQueue.prototype.updateRotation = function (rx, ry, rz) {
        if (Math.abs(rx) != 0 || Math.abs(ry) != 0 || Math.abs(rz) != 0) {
            // GameMathUtils.rotation( MathUnits.angleTurnRadian( rx ), MathUnits.angleTurnRadian( ry ), MathUnits.angleTurnRadian( rz ), this._rotaMat ); 
            Laya.Matrix4x4.multiply(this._rotaMat, this._scaMat, this.matrix);
            this._isTrastrom = true;
        }
    };
    /**
     * 更新缩放
     */
    SubQueue.prototype.updateScale = function (sx, sy, sz) {
        if (sx != 1 || sy != 1 || sz != 1) {
            var out = this._scaMat.elements;
            out[0] = sx;
            out[5] = sy;
            out[10] = sz;
            out[1] = out[4] = out[8] = out[12] = out[9] = out[13] = out[2] = out[6] = out[14] = out[3] = out[7] = out[11] = 0;
            out[15] = 1;
            Laya.Matrix4x4.multiply(this._rotaMat, this._scaMat, this.matrix);
            this._isTrastrom = true;
        }
    };
    return SubQueue;
}());
exports.SubQueue = SubQueue;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/TestScene");
            };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
        REG("ui.test.TestSceneUI", TestSceneUI);
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
